name: CI

on:
  push:
    branches: [ master ]
  workflow_dispatch:

jobs:
  build-dita:
    name: Build DITA
    runs-on: ubuntu-latest
    steps:
      - name: Git checkout
        uses: actions/checkout@v4

      # Ensure we own out/ before any Docker step writes as root
      - name: Prepare workspace dirs
        run: |
          mkdir -p out/html out/pdf
          chmod -R 777 out || true

      - name: Build Bootstrap ‚öôÔ∏è
        uses: dita-ot/dita-ot-action@4.3
        with:
          install: |
            apt-get update -q
            export DEBIAN_FRONTEND=noninteractive
            apt-get install -qy --no-install-recommends nodejs
            nodejs -v
          plugins: |
            fox.jason.extend.css
            net.infotexture.dita-bootstrap
            net.infotexture.dita-bootstrap.lunr
            fox.jason.prismjs
            fox.jason.favicon
            fox.jason.open-graph
          project: .github/dita-ot/html.xml

      # Fix any root-owned files created by the container
      - name: Fix permissions (after HTML)
        if: always()
        run: |
          sudo chown -R "$USER:$USER" "$GITHUB_WORKSPACE/out" || true

      - name: Deploy HTML üöÄ
        uses: JamesIves/github-pages-deploy-action@3.7.1
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          BRANCH: gh-pages
          FOLDER: out/html

      - name: Build PDF üñ®Ô∏è
        uses: dita-ot/dita-ot-action@4.3
        with:
         install: |
          apt-get update -q
          export DEBIAN_FRONTEND=noninteractive
          apt-get install -qy --no-install-recommends nodejs
          nodejs -v
         plugins: |
          fox.jason.extend.css
          fox.jason.prismjs
          ./plugins/edu.eviavt.pdfvars        # <-- install our local override
         build: |
          dita \
           --input=dita/document.ditamap \
           --format=pdf \
           --theme=.github/themes/theme.yaml \
          --temp=out/pdf/temp-sys \
          --verbose \
          -Dclean.temp=no \
          -Dpdf.formatter=fop \
          -Dargs.fo.userconfig=$GITHUB_WORKSPACE/fop/fop.xconf


      # üì¶ Upload FO & logs when the build fails
      - name: Upload FO & logs (on failure)
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: fo-and-logs
          path: |
            out/pdf/temp/**
            out/pdf/logs/**

      # Upload PDF only on success
      - name: Upload PDF üìö
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: dita-pdf
          path: out/pdf/*.pdf
