name: CI
'on':
  push:
    branches:
      - master
  workflow_dispatch:
jobs:
  build-dita:
    name: Build DITA
    runs-on: ubuntu-latest
    steps:
      - name: Git checkout
        uses: actions/checkout@v2

      - name: Build Bootstrap ⚙️
        uses: dita-ot/dita-ot-action@4.3
        with:
          install: |
            apt-get update -q
            export DEBIAN_FRONTEND=noninteractive
            apt-get install -qy --no-install-recommends nodejs
            nodejs -v
          plugins: |
            fox.jason.extend.css
            net.infotexture.dita-bootstrap
            net.infotexture.dita-bootstrap.lunr
            fox.jason.prismjs
            fox.jason.favicon
            fox.jason.open-graph
          project: .github/dita-ot/html.xml

      - name: Deploy HTML 🚀
        uses: JamesIves/github-pages-deploy-action@3.7.1
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          BRANCH: gh-pages
          FOLDER: out/html

      - name: Build PDF 🖨️
        uses: dita-ot/dita-ot-action@4.3
        with:
          install: |
            apt-get update -q
            export DEBIAN_FRONTEND=noninteractive
            apt-get install -qy --no-install-recommends nodejs
            nodejs -v
          plugins: |
            fox.jason.extend.css
            fox.jason.prismjs
          build: |
            set -euo pipefail
            THEME="$GITHUB_WORKSPACE/.github/themes/theme.yaml"
            LOGDIR="$GITHUB_WORKSPACE/out/pdf/logs"
            TEMPDIR="$GITHUB_WORKSPACE/out/pdf/temp"
            RUNLOG="$LOGDIR/runner.log"
            DITALOG="$LOGDIR/dita.log"

            echo "=== Paths ==="
            echo "THEME:   $THEME"
            echo "LOGDIR:  $LOGDIR"
            echo "TEMPDIR: $TEMPDIR"
            mkdir -p "$LOGDIR" "$TEMPDIR"
            test -f "$THEME" || (echo "Theme file not found at $THEME" | tee -a "$RUNLOG"; exit 1)

            echo "=== Show header/footer section from theme ===" | tee -a "$RUNLOG"
            awk 'f{print} /^(header:|footer:)/{f=1} /^style:/{exit}' "$THEME" | tee -a "$RUNLOG" || true

            echo "=== Running DITA-OT (DEBUG verbosity) ===" | tee -a "$RUNLOG"
            # Use tee so we always capture console output even if --logfile isn't created
            set -x
            dita -i "$GITHUB_WORKSPACE/dita/document.ditamap" \
                 -o "$GITHUB_WORKSPACE/out/pdf" \
                 -f pdf \
                 --theme="$THEME" \
                 --org.dita.index.skip="yes" \
                 -Dpdf.formatter=fop \
                 -Dargs.fo.userconfig="$GITHUB_WORKSPACE/fop/fop.xconf" \
                 -Dclean.temp=no \
                 -t "$TEMPDIR" \
                 --verbosity DEBUG \
                 --logfile "$DITALOG" 2>&1 | tee -a "$RUNLOG"
            set +x

      # 🔍 If the build failed, sweep both workspace temp AND /tmp for FO files; then analyze
      - name: Collect FO from /tmp and workspace (on failure)
        if: failure()
        run: |
          set -euo pipefail
          echo "=== Collecting FO files ==="
          mkdir -p out/pdf/temp-sys out/pdf/logs
          echo "Copying workspace FO (if any)..."
          find out/pdf/temp -type f -name '*.fo' -print -exec cp -f {} out/pdf/temp-sys/ \; 2>/dev/null || true
          echo "Copying system FO from /tmp (if any)..."
          find /tmp -maxdepth 2 -type d -name 'temp*' -print | while read d; do
            find "$d" -type f -name '*.fo' -print -exec cp -f {} out/pdf/temp-sys/ \; || true
          done
          echo "Available FO files:"
          ls -l out/pdf/temp-sys || true
          echo "Available logs:"
          ls -l out/pdf/logs || true

      - name: Debug FO for empty static-content (on failure)
        if: failure()
        run: |
          echo "=== Scanning FO for <fo:static-content> ==="
          for fo in $(find out/pdf/temp-sys -type f -name '*.fo'); do
            echo "---- $fo ----"
            grep -n "<fo:static-content" "$fo" || true
          done
          echo
          echo "=== Heuristic: flag static-content blocks with no <fo:block> ==="
          for fo in $(find out/pdf/temp-sys -type f -name '*.fo'); do
            awk '
              /<fo:static-content/ { inSC=1; start=NR; hasBlock=0 }
              inSC && /<fo:block/ { hasBlock=1 }
              inSC && /<\/fo:static-content>/ {
                if (hasBlock==0) {
                  printf("\n---- EMPTY static-content in %s lines %d-%d ----\n", FILENAME, start, NR);
                  cmd = sprintf("sed -n \"%d,%dp\" \"%s\"", (start>5?start-5:1), NR+10, FILENAME);
                  system(cmd);
                }
                inSC=0; hasBlock=0;
              }
            ' "$fo" || true
          done
          echo
          echo "=== Tail of runner log (console) ==="
          tail -n 200 out/pdf/logs/runner.log || true
          echo
          echo "=== Tail of DITA log (if present) ==="
          tail -n 200 out/pdf/logs/dita.log || true

      - name: Upload FO & logs (on failure)
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: fo-and-logs
          path: |
            out/pdf/temp-sys/**
            out/pdf/temp/**
            out/pdf/logs/**



      - name: Upload PDF 📚
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: dita-pdf
          path: out/pdf
