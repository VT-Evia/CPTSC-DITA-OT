name: CI

on:
  push:
    branches: [ master ]
  workflow_dispatch:

jobs:
  build-dita:
    name: Build DITA
    runs-on: ubuntu-latest
    steps:
      - name: Git checkout
        uses: actions/checkout@v4

      # Ensure we own out/ before any Docker step writes as root
      - name: Prepare workspace dirs
        run: |
          mkdir -p out/html out/pdf
          chmod -R 777 out || true

      - name: Build Bootstrap ‚öôÔ∏è
        uses: dita-ot/dita-ot-action@4.3
        with:
          install: |
            apt-get update -q
            export DEBIAN_FRONTEND=noninteractive
            apt-get install -qy --no-install-recommends nodejs
            nodejs -v
          plugins: |
            fox.jason.extend.css
            net.infotexture.dita-bootstrap
            net.infotexture.dita-bootstrap.lunr
            fox.jason.prismjs
            fox.jason.favicon
            fox.jason.open-graph
          project: .github/dita-ot/html.xml

      # Fix any root-owned files created by the container
      - name: Fix permissions (after HTML)
        if: always()
        run: |
          sudo chown -R "$USER:$USER" "$GITHUB_WORKSPACE/out" || true

      - name: Deploy HTML üöÄ
        uses: JamesIves/github-pages-deploy-action@3.7.1
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          BRANCH: gh-pages
          FOLDER: out/html

      - name: Build PDF üñ®Ô∏è
        uses: dita-ot/dita-ot-action@4.3
        with:
          install: |
            apt-get update -q
            export DEBIAN_FRONTEND=noninteractive
            apt-get install -qy --no-install-recommends nodejs
            nodejs -v
          plugins: |
            fox.jason.extend.css
            fox.jason.prismjs
          build: |
            # POSIX /bin/sh (no pipefail)
            set -eu
            THEME="$GITHUB_WORKSPACE/.github/themes/theme.yaml"
            LOGDIR="$GITHUB_WORKSPACE/out/pdf/logs"
            TEMPDIR="$GITHUB_WORKSPACE/out/pdf/temp"
            OUTDIR="$GITHUB_WORKSPACE/out/pdf"

            # Ensure dirs & files exist BEFORE tee/logging
            mkdir -p "$LOGDIR" "$TEMPDIR" "$OUTDIR"
            RUNLOG="$LOGDIR/runner.log"
            DITALOG="$LOGDIR/dita.log"
            : > "$RUNLOG"
            : > "$DITALOG"

            echo "=== Paths ===" | tee -a "$RUNLOG"
            echo "THEME:   $THEME" | tee -a "$RUNLOG"
            echo "LOGDIR:  $LOGDIR" | tee -a "$RUNLOG"
            echo "TEMPDIR: $TEMPDIR" | tee -a "$RUNLOG"
            echo "OUTDIR:  $OUTDIR" | tee -a "$RUNLOG"

            if [ ! -f "$THEME" ]; then
              echo "Theme file not found at $THEME" | tee -a "$RUNLOG"
              exit 1
            fi

            echo "=== Header/Footer excerpt from theme ===" | tee -a "$RUNLOG"
            awk 'f{print} /^(header:|footer:)/{f=1} /^style:/{exit}' "$THEME" | tee -a "$RUNLOG" || true

            # Build PDF (note: -v instead of --verbosity)
            # outputFile.base gives a predictable final name: userguide.pdf
            dita -i "$GITHUB_WORKSPACE/dita/document.ditamap" \
                 -o "$OUTDIR" \
                 -f pdf \
                 --theme="$THEME" \
                 --org.dita.index.skip="yes" \
                 -Dpdf.formatter=fop \
                 -Dargs.fo.userconfig="$GITHUB_WORKSPACE/fop/fop.xconf" \
                 -DoutputFile.base=userguide \
                 -Dclean.temp=no \
                 -t "$TEMPDIR" \
                 -v \
                 --logfile "$DITALOG" 2>&1 | tee -a "$RUNLOG"

      # Make sure host steps can write even if the container created root-owned files
      - name: Fix permissions (after PDF)
        if: always()
        run: |
          sudo chown -R "$USER:$USER" "$GITHUB_WORKSPACE/out" || true

      # ‚úÖ Verify that a PDF exists; if not, print a concise error summary and fail
      - name: Verify PDF output
        run: |
          set -eu
          PDF_FOUND="$(find out/pdf -maxdepth 1 -type f -name '*.pdf' | wc -l | tr -d ' ')"
          if [ "$PDF_FOUND" -eq 0 ]; then
            echo "‚ùå No PDF produced under out/pdf"
            echo
            echo "=== Top ERROR lines from logs/dita.log (if present) ==="
            if [ -f out/pdf/logs/dita.log ]; then
              grep -Ei '(\[ERROR\]|FOPException|ValidationException|static-content|Exception)' out/pdf/logs/dita.log | tail -n 50 || true
              echo
              echo "=== Tail of logs/dita.log ==="
              tail -n 200 out/pdf/logs/dita.log || true
            else
              echo "No logs/dita.log present."
            fi
            echo
            echo "=== Tail of logs/runner.log ==="
            if [ -f out/pdf/logs/runner.log ]; then
              tail -n 200 out/pdf/logs/runner.log || true
            else
              echo "No logs/runner.log present."
            fi
            exit 1
          else
            echo "‚úÖ PDF produced:"
            find out/pdf -maxdepth 1 -type f -name '*.pdf' -print
          fi

      # üì¶ Upload FO & logs when the build fails
      - name: Upload FO & logs (on failure)
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: fo-and-logs
          path: |
            out/pdf/temp/**
            out/pdf/logs/**

      # Upload PDF only on success
      - name: Upload PDF üìö
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: dita-pdf
          path: out/pdf/*.pdf
