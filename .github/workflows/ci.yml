name: CI
'on':
  push:
    branches: [ master ]
  workflow_dispatch:

jobs:
  build-dita:
    name: Build DITA
    runs-on: ubuntu-latest
    steps:
      - name: Git checkout
        uses: actions/checkout@v2

      # Ensure we own out/ before any Docker step writes as root
      - name: Prepare workspace dirs
        run: |
          mkdir -p out/html out/pdf
          chmod -R 777 out || true

      - name: Build Bootstrap ‚öôÔ∏è
        uses: dita-ot/dita-ot-action@4.3
        with:
          install: |
            apt-get update -q
            export DEBIAN_FRONTEND=noninteractive
            apt-get install -qy --no-install-recommends nodejs
            nodejs -v
          plugins: |
            fox.jason.extend.css
            net.infotexture.dita-bootstrap
            net.infotexture.dita-bootstrap.lunr
            fox.jason.prismjs
            fox.jason.favicon
            fox.jason.open-graph
          project: .github/dita-ot/html.xml

      # Fix any root-owned files created by the container
      - name: Fix permissions (after HTML)
        if: always()
        run: |
          sudo chown -R "$USER:$USER" "$GITHUB_WORKSPACE/out" || true

      - name: Deploy HTML üöÄ
        uses: JamesIves/github-pages-deploy-action@3.7.1
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          BRANCH: gh-pages
          FOLDER: out/html
     
      - name: Build PDF üñ®Ô∏è
        uses: dita-ot/dita-ot-action@4.3
        with:
          install: |
            apt-get update -q
            export DEBIAN_FRONTEND=noninteractive
            apt-get install -qy --no-install-recommends nodejs
            nodejs -v
          plugins: |
            fox.jason.extend.css
            fox.jason.prismjs
          build: |
            # POSIX sh-safe (no pipefail)
            set -eu
            THEME="$GITHUB_WORKSPACE/.github/themes/theme.yaml"
            LOGDIR="$GITHUB_WORKSPACE/out/pdf/logs"
            TEMPDIR="$GITHUB_WORKSPACE/out/pdf/temp"

            # Create dirs BEFORE any tee
            mkdir -p "$LOGDIR" "$TEMPDIR"

            RUNLOG="$LOGDIR/runner.log"
            DITALOG="$LOGDIR/dita.log"
            : > "$RUNLOG"      # touch
            : > "$DITALOG"     # touch

            echo "=== Paths ===" | tee -a "$RUNLOG"
            echo "THEME:   $THEME" | tee -a "$RUNLOG"
            echo "LOGDIR:  $LOGDIR" | tee -a "$RUNLOG"
            echo "TEMPDIR: $TEMPDIR" | tee -a "$RUNLOG"

            [ -f "$THEME" ] || { echo "Theme file not found at $THEME" | tee -a "$RUNLOG"; exit 1; }

            echo "=== Header/Footer excerpt from theme ===" | tee -a "$RUNLOG"
            awk 'f{print} /^(header:|footer:)/{f=1} /^style:/{exit}' "$THEME" | tee -a "$RUNLOG" || true

            # Run DITA-OT with absolute paths, DEBUG, and workspace temp/logs
            dita -i "$GITHUB_WORKSPACE/dita/document.ditamap" \
                 -o "$GITHUB_WORKSPACE/out/pdf" \
                 -f pdf \
                 --theme="$THEME" \
                 --org.dita.index.skip="yes" \
                 -Dpdf.formatter=fop \
                 -Dargs.fo.userconfig="$GITHUB_WORKSPACE/fop/fop.xconf" \
                 -Dclean.temp=no \
                 -t "$TEMPDIR" \
                 --verbosity DEBUG \
                 --logfile "$DITALOG" 2>&1 | tee -a "$RUNLOG"

      # Make sure host steps can write even if container created root-owned files
      - name: Fix permissions (after PDF)
        if: always()
        run: |
          sudo chown -R "$USER:$USER" "$GITHUB_WORKSPACE/out" || true

      # üîç Diagnostics if PDF build failed
      - name: Debug FO for empty static-content (on failure)
        if: failure()
        run: |
          echo "=== Listing FO files in out/pdf/temp ==="
          find out/pdf/temp -type f -name '*.fo' -print || true
          echo
          echo "=== Grep context around <fo:static-content> (10 lines) ==="
          grep -R -n -C 10 "<fo:static-content" out/pdf/temp || true
          echo
          echo "=== Heuristic: flag static-content blocks with no <fo:block> ==="
          for fo in $(find out/pdf/temp -type f -name '*.fo' 2>/dev/null); do
            awk '
              /<fo:static-content/ { inSC=1; start=NR; hasBlock=0 }
              inSC && /<fo:block/ { hasBlock=1 }
              inSC && /<\/fo:static-content>/ {
                if (hasBlock==0) {
                  printf("\n---- EMPTY static-content in %s lines %d-%d ----\n", FILENAME, start, NR);
                  cmd = sprintf("sed -n \"%d,%dp\" \"%s\"", (start>5?start-5:1), NR+10, FILENAME);
                  system(cmd);
                }
                inSC=0; hasBlock=0;
              }
            ' "$fo" || true
          done
          echo
          echo "=== Tail of runner log (console) ==="
          tail -n 200 out/pdf/logs/runner.log || true
          echo
          echo "=== Tail of DITA log (if present) ==="
          tail -n 200 out/pdf/logs/dita.log || true

      # üì¶ Upload FO & logs when the build fails
      - name: Upload FO & logs (on failure)
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: fo-and-logs
          path: |
            out/pdf/temp/**
            out/pdf/logs/**


      # Upload PDF only on success
      - name: Upload PDF üìö
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: dita-pdf
          path: out/pdf
