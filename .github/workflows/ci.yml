name: CI
'on':
  push:
    branches:
      - master
  workflow_dispatch:
jobs:
  build-dita:
    name: Build DITA
    runs-on: ubuntu-latest
    steps:
      - name: Git checkout
        uses: actions/checkout@v2

      - name: Build Bootstrap ‚öôÔ∏è
        uses: dita-ot/dita-ot-action@4.3
        with:
          install: |
            apt-get update -q
            export DEBIAN_FRONTEND=noninteractive
            apt-get install -qy --no-install-recommends nodejs
            nodejs -v
          plugins: |
            fox.jason.extend.css
            net.infotexture.dita-bootstrap
            net.infotexture.dita-bootstrap.lunr
            fox.jason.prismjs
            fox.jason.favicon
            fox.jason.open-graph
          project: .github/dita-ot/html.xml

      - name: Deploy HTML üöÄ
        uses: JamesIves/github-pages-deploy-action@3.7.1
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          BRANCH: gh-pages
          FOLDER: out/html

      - name: Build PDF üñ®Ô∏è
        uses: dita-ot/dita-ot-action@4.3
        with:
          install: |
            apt-get update -q
            export DEBIAN_FRONTEND=noninteractive
            apt-get install -qy --no-install-recommends nodejs
            nodejs -v
          plugins: |
            fox.jason.extend.css
            fox.jason.prismjs
          build: |
            set -e
            mkdir -p "$GITHUB_WORKSPACE/out/pdf/temp" "$GITHUB_WORKSPACE/out/pdf/logs"
            dita -i dita/document.ditamap \
                 -o out/pdf \
                 -f pdf \
                 --theme=.github/themes/theme.yaml \
                 --org.dita.index.skip="yes" \
                 -Dpdf.formatter=fop \
                 -Dargs.fo.userconfig=$GITHUB_WORKSPACE/fop/fop.xconf \
                 -Dclean.temp=no \
                 -Ddita.temp.dir=$GITHUB_WORKSPACE/out/pdf/temp \
                 -Dargs.logdir=$GITHUB_WORKSPACE/out/pdf/logs

      # üîç DIAGNOSTIC (runs only if the PDF build fails)
      - name: Debug FO for empty static-content
        if: failure()
        run: |
          echo "=== Listing FO files in out/pdf/temp ==="
          find out/pdf/temp -type f -name '*.fo' -print || true
          echo
          echo "=== Grep context around <fo:static-content> (10 lines of context) ==="
          grep -R -n -C 10 "<fo:static-content" out/pdf/temp || true
          echo
          echo "=== Heuristic: flag static-content blocks with no <fo:block> ==="
          for fo in $(find out/pdf/temp -type f -name '*.fo'); do
            awk '
              /<fo:static-content/ { inSC=1; start=NR; hasBlock=0 }
              inSC && /<fo:block/ { hasBlock=1 }
              inSC && /<\/fo:static-content>/ {
                if (hasBlock==0) {
                  printf("\n---- EMPTY static-content in %s lines %d-%d ----\n", FILENAME, start, NR);
                  cmd = sprintf("sed -n \"%d,%dp\" \"%s\"", (start>5?start-5:1), NR+10, FILENAME);
                  system(cmd);
                }
                inSC=0; hasBlock=0;
              }
            ' "$fo" || true
          done

      # üì¶ Upload temp FO & logs for local inspection (only when the build fails)
      - name: Upload FO temp (on failure)
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: fo-temp
          path: out/pdf/temp/**

      - name: Upload DITA logs (on failure)
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: dita-logs
          path: out/pdf/logs/**

      - name: Upload PDF üìö
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: dita-pdf
          path: out/pdf
